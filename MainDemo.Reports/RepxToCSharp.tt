<#@ template language="C#" debug="True" #>
<#@ output extension="txt" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Drawing.dll"#>
<#@ assembly name="$(SolutionDir)MainDemo.Reports\bin\Debug\DevExpress.Data.v12.2.dll"#>
<#@ assembly name="$(SolutionDir)MainDemo.Reports\bin\Debug\DevExpress.ExpressApp.Reports.v12.2.dll"#>
<#@ assembly name="$(SolutionDir)MainDemo.Reports\bin\Debug\DevExpress.Printing.v12.2.Core.dll"#>
<#@ assembly name="$(SolutionDir)MainDemo.Reports\bin\Debug\DevExpress.XtraReports.v12.2.dll"#>
<#@ assembly name="$(SolutionDir)MainDemo.Reports\bin\Debug\MainDemo.Reports.dll"#>
<#@ import namespace="DevExpress.ExpressApp.Reports" #>
<#@ import namespace="MainDemo.Reports" #>
<#@ assembly name="T4Toolbox.dll"#>
<#@ include file="T4Toolbox.tt" #>
<#
	string solutionDir = Host.ResolveAssemblyReference("$(SolutionDir)");
	var files = Directory
				.GetFiles(solutionDir, "*.repx", SearchOption.AllDirectories)
				.Where(x => !x.Contains(@"\bin\"));

	int total = 0;
	int skipped = 0;
	foreach(string fullFilename in files)
	{
		total = total + 1;

		var templateFile = Host.TemplateFile;
		string relativeFilename = @"\" + fullFilename.Substring(solutionDir.Length);

		string scriptsPartOutputFilename = Path.GetDirectoryName(templateFile) + Path.ChangeExtension(relativeFilename, ".cs");
		string mainPartOutputFilename = Path.GetDirectoryName(templateFile) + Path.ChangeExtension(relativeFilename, "Designer.cs");
		string resxPartOutputFilename = Path.GetDirectoryName(templateFile) + Path.ChangeExtension(relativeFilename, ".resx");

		string repxChecksum = new ChecksumCalculator(fullFilename).Get();
		string lastChecksum = ChecksumExtractor.Get(scriptsPartOutputFilename);

		bool preserveExisting = repxChecksum == lastChecksum;
		if (preserveExisting)
			skipped = skipped + 1;

     	var scriptsPartTemplate = new ScriptsPartTemplate();
		scriptsPartTemplate.Checksum = repxChecksum;
		scriptsPartTemplate.Output.PreserveExistingFile = preserveExisting;
		scriptsPartTemplate.RepxFileName = fullFilename;
		scriptsPartTemplate.RenderToFile(scriptsPartOutputFilename);
	
		var mainPartTemplate = new DesignerPartTemplate();
		mainPartTemplate.Output.PreserveExistingFile = preserveExisting;
		mainPartTemplate.RepxFileName = fullFilename;
		mainPartTemplate.RenderToFile(mainPartOutputFilename);

		var resxPartTemplate = new ResxPartTemplate();
		resxPartTemplate.Output.PreserveExistingFile = preserveExisting;
		resxPartTemplate.RenderToFile(resxPartOutputFilename);
	}

	WriteLine(string.Format("{0,-60}:{1, 3}", "Total reports found", total));
	WriteLine(string.Format("{0,-60}:{1, 3}", "  Total reports generated", total - skipped));
	WriteLine(string.Format("{0,-60}:{1, 3}", "  Total reports skipped because unchanged", skipped));
#>

<#+
    public class DesignerPartTemplate : T4Toolbox.Template
    {
		public string RepxFileName { get; set; }

        public override string TransformText()
        {		
			this.PushIndent("    ");
		        var mainPartFactory = new XtraReportDesignerPartFactory(RepxFileName);
				WriteLine(mainPartFactory.GetMainCode());
			this.PopIndent();
			return this.GenerationEnvironment.ToString();
		}
    }
#>

<#+
    public class ScriptsPartTemplate : T4Toolbox.Template
    {
		public string RepxFileName { get; set; }
		public string Checksum { get; set; }

        public override string TransformText()
        {		
			this.WriteLine(ChecksumCalculator.ChecksumPrefix + Checksum);
			this.PushIndent("    ");
		        var mainPartFactory = new XtraReportScriptsPartFactory(RepxFileName);
				WriteLine(mainPartFactory.GetScriptsCode());
			this.PopIndent();
			return this.GenerationEnvironment.ToString();
		}
    }
#>

<#+
    public class ResxPartTemplate : T4Toolbox.Template
    {
        public override string TransformText()
        {		
			return new XtraReportResourceFactory().GetResxContents();
		}
    }
#>
