<#@ template language="C#" debug="True" #>
<#@ output extension="txt" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Drawing.dll"#>
<#@ assembly name="$(SolutionDir)MainDemo.Reports\bin\Debug\DevExpress.Data.v13.1.dll"#>
<#@ assembly name="$(SolutionDir)MainDemo.Reports\bin\Debug\DevExpress.ExpressApp.Reports.v13.1.dll"#>
<#@ assembly name="$(SolutionDir)MainDemo.Reports\bin\Debug\DevExpress.Printing.v13.1.Core.dll"#>
<#@ assembly name="$(SolutionDir)MainDemo.Reports\bin\Debug\DevExpress.XtraReports.v13.1.dll"#>
<#@ assembly name="$(SolutionDir)MainDemo.Reports\bin\Debug\MainDemo.Reports.dll"#>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="DevExpress.ExpressApp.Reports" #>
<#@ import namespace="MainDemo.Reports" #>
<#@ assembly name="T4Toolbox.dll"#>
<#@ include file="T4Toolbox.tt" #>
<#
    Stopwatch stopwatch = new Stopwatch();
    stopwatch.Start();
    
    Console.Beep();
    var templateFile = Host.TemplateFile;
    string solutionDir = Host.ResolveAssemblyReference("$(SolutionDir)");
    string projectDir = Path.GetDirectoryName(templateFile);	

    var files = Directory
                .GetFiles(solutionDir, "*.repx", SearchOption.AllDirectories)
                .Where(x => !x.Contains(@"\bin\"));

    int total = 0;
    int skipped = 0;

    foreach(string fullFilename in files)
    {
        total = total + 1;

        string relativeFileName = @"\" + fullFilename.Substring(solutionDir.Length);

        string scriptsPartOutputFilename = projectDir + Path.ChangeExtension(relativeFileName, ".cs");
        string designerPartOutputFilename = projectDir + Path.ChangeExtension(relativeFileName, ".repx.cs");

        string repxChecksum = ChecksumCalculator.Get(File.ReadAllText(fullFilename));
        string lastChecksum = ChecksumExtractor.Get(scriptsPartOutputFilename);

        bool preserveExisting = repxChecksum == lastChecksum;
        if (preserveExisting)
            skipped = skipped + 1;

        var reader = new XtraReportReader(solutionDir, relativeFileName);
        var uniqueIdentifierProvider = new UniqueIdentifierProvider(relativeFileName);

        var scriptsPartTemplate = new ScriptsPartTemplate(reader, uniqueIdentifierProvider);
        scriptsPartTemplate.GenerateChecksum = () => repxChecksum;
        if (preserveExisting)
            scriptsPartTemplate.ExistingFile = scriptsPartOutputFilename;
        scriptsPartTemplate.RenderToFile(scriptsPartOutputFilename);

        var designerPartTemplate = new DesignerPartTemplate(reader, uniqueIdentifierProvider);
        designerPartTemplate.GenerateChecksum = () => scriptsPartTemplate.ScriptsChecksum;
        if (preserveExisting)
            designerPartTemplate.ExistingFile = designerPartOutputFilename;	
        // T4Toolbox 11.7.0.0 doesn't support nested files very well.
        // Adding DependentUpon metadata creates a correct csproj file, but:
        // - it adds a big overhead when there are a lot of reports to transform
        // - the nested files are only visible when the project is reloaded   
        // Commented out for the time-being.
        //designerPartTemplate.Output.Metadata["DependentUpon"] = Path.GetFileName(scriptsPartOutputFilename);
        designerPartTemplate.RenderToFile(designerPartOutputFilename);
    }

    WriteLine("(This is an automatically generated file which should be excluded from version control)");
    WriteLine("");
    WriteLine("Summary of repx transformation");
    WriteLine("==============================");
    WriteLine(string.Format("{0,-60}:{1, 3}", "Total repx files found", total));
    WriteLine(string.Format("{0,-60}:{1, 3}", "  Total reports generated", total - skipped));
    WriteLine(string.Format("{0,-60}:{1, 3}", "  Total reports skipped because unchanged", skipped));

    stopwatch.Stop();
    Console.Beep();

    // Write result
    WriteLine("");
    WriteLine("Time elapsed: {0}", stopwatch.Elapsed);
#>

<#+
    public abstract class XtraReportTemplateBase : T4Toolbox.Template
    {
        public XtraReportTemplateBase(XtraReportReader reader, UniqueIdentifierProvider uniqueIdentifierProvider)
        {
            Reader = reader;
            UniqueIdentifierProvider = uniqueIdentifierProvider;
        }
        
        public Func<string> GenerateChecksum { get; set; }
        public XtraReportReader Reader { get; private set; }
        public UniqueIdentifierProvider UniqueIdentifierProvider { get; private set; }
        public string ExistingFile { get; set; }
    }

    public class DesignerPartTemplate : XtraReportTemplateBase
    {
        public DesignerPartTemplate(XtraReportReader reader, UniqueIdentifierProvider uniqueIdentifierProvider) : base(reader, uniqueIdentifierProvider) {}

        public override string TransformText()
        {
            if (ExistingFile != null)
                if (File.Exists(ExistingFile))
                    return File.ReadAllText(ExistingFile);

            this.WriteLine(ChecksumParser.ChecksumPrefix + GenerateChecksum());
            var mainPartFactory = new XtraReportDesignerPartFactory(Reader, UniqueIdentifierProvider);
            string code = mainPartFactory.GetMainCode();
            WriteLine(code);

            return this.GenerationEnvironment.ToString();
        }
    }

    public class ScriptsPartTemplate : XtraReportTemplateBase
    {
        public ScriptsPartTemplate(XtraReportReader reader, UniqueIdentifierProvider uniqueIdentifierProvider) : base(reader, uniqueIdentifierProvider) {}

        public string ScriptsChecksum { get; private set; }

        public override string TransformText()
        {
            if (ExistingFile != null)
                return File.ReadAllText(ExistingFile);
        
            this.WriteLine(ChecksumParser.ChecksumPrefix + GenerateChecksum());
            var mainPartFactory = new XtraReportScriptsPartFactory(Reader, UniqueIdentifierProvider);
            var code = mainPartFactory.GetScriptsCode();
            WriteLine(code);

            ScriptsChecksum = ChecksumCalculator.Get(this.GenerationEnvironment.ToString());

            return this.GenerationEnvironment.ToString();
        }
    }
#>
