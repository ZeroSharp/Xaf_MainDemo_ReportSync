<#@ template language="C#" debug="True" #>
<#@ output extension="txt" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Drawing.dll"#>
<#@ assembly name="$(SolutionDir)MainDemo.Reports\bin\Debug\DevExpress.Data.v12.2.dll"#>
<#@ assembly name="$(SolutionDir)MainDemo.Reports\bin\Debug\DevExpress.ExpressApp.Reports.v12.2.dll"#>
<#@ assembly name="$(SolutionDir)MainDemo.Reports\bin\Debug\DevExpress.Printing.v12.2.Core.dll"#>
<#@ assembly name="$(SolutionDir)MainDemo.Reports\bin\Debug\DevExpress.XtraReports.v12.2.dll"#>
<#@ assembly name="$(SolutionDir)MainDemo.Reports\bin\Debug\MainDemo.Reports.dll"#>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="DevExpress.ExpressApp.Reports" #>
<#@ import namespace="MainDemo.Reports" #>
<#@ assembly name="T4Toolbox.dll"#>
<#@ include file="T4Toolbox.tt" #>
<#
    Stopwatch stopwatch = new Stopwatch();
    stopwatch.Start();
    //Console.Beep();    
    var templateFile = Host.TemplateFile;
    string solutionDir = Host.ResolveAssemblyReference("$(SolutionDir)");
    string projectDir = Path.GetDirectoryName(templateFile);	

    var files = Directory
                .GetFiles(projectDir, "*.repx.cs", SearchOption.AllDirectories)
                .Where(x => !x.Contains(@"\bin\"));

    int total = 0;
    int skipped = 0;
    int missing = 0;

    foreach(string fullFilename in files)
    {
        total = total + 1;

        string relativeFileName = fullFilename.Substring(projectDir.Length);

        string scriptsPartOutputFilename = fullFilename.Replace(".repx.cs", ".cs");
        string designerPartOutputFilename = fullFilename;

        string repxFilename = Path.GetFullPath(solutionDir.TrimEnd(Path.DirectorySeparatorChar) + Path.ChangeExtension(relativeFileName, ""));
        if (!File.Exists(repxFilename))
        {
            Warning(String.Format("Could not find repx file {0} while transforming CSharpToRepx.", repxFilename));
            missing = missing + 1;
        }
        else
        {
            var injector = new XtraReportScriptInjector(repxFilename);
            string scriptSource = File.ReadAllText(scriptsPartOutputFilename);
            injector.InjectScripts(scriptSource, repxFilename, replaceOriginal: true);
        }
    }

    WriteLine("(This is an automatically generated file which should be excluded from version control)");
    WriteLine("");
    WriteLine("Summary of process repx files");
    WriteLine("=============================");
    WriteLine(string.Format("{0,-60}:{1, 3}", "Total C# files found", total));
    WriteLine(string.Format("{0,-60}:{1, 3}", "  Total reports injected", total - skipped - missing));
    WriteLine(string.Format("{0,-60}:{1, 3}", "  Total reports missing", missing));
    WriteLine(string.Format("{0,-60}:{1, 3}", "  Total reports skipped because unchanged", skipped));

    stopwatch.Stop();
    //Console.Beep();

    // Write result
    WriteLine("");
    WriteLine("Time elapsed: {0}", stopwatch.Elapsed);
#>
